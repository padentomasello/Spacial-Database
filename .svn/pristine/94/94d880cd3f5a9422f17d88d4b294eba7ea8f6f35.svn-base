package util;

import java.util.ArrayList;
import java.util.Iterator;

/** A Set2D implemented with a QuadTree.  The type argument, Point,
 *  indicates the type of points contained in the set.  The rather
 *  involved type parameter structure here allows you to extend
 *  QuadPoint, and thus add additional data and methods to the points
 *  you store.
 *  @author Daniel Paden Tomasello cs61b-bz
 */
public class QuadTree<Point> extends Set2D<Point> {
    // Add only private and package private members to this class,
    // or it may not work with our application.

    /** An empty set of Points that uses VIEW to extract position information.
     *  The argument TRANSITIONSIZE has no externally
     *  visible effect, but may affect performance.  It is intended to specify
     *  the largest set Points that resides unsubdivided in a single node of
     *  the tree.  While space-efficient, such nodes have slower search times
     *  as their size increases.
     *  */
    public QuadTree(PointView<Point> view, int transitionSize) {
        super(view);
        _transitionSize = transitionSize;
        _root = new InternalNode<Point>(getView(), _transitionSize);
    }

    /* PUBLIC METHODS.  See Set2D.java for documentation */

    /** Returns my transitionSize parameter (supplied to my constructor). */
    public int getTransitionSize() {
        return _transitionSize;
    }

    @Override
    public int size() {
        return _root.size();
    }

    @Override
    public void add(Point p) {
        _root.add(p);
    }

    @Override
    public void remove(Point p) {
        _root.remove(p);
    }

    @Override
    public boolean contains(Point p) {
        return _root.contains(p);
    }

    @Override
    public Iterator<Point> iterator() {
        return _root.iterator();
    }

    @Override
    public Iterator<Point> iterator(double xl, double yl,
            double xu, double yu) {
        return null; // FIXME: REPLACE WITH BODY
    }


    /* END OF PUBLIC MEMBERS */

    /** The maximum size for an unsubdivided node. */
    private int _transitionSize;

    /** The root of the tree. */
    private InternalNode<Point> _root = null;
    
    // Do not add any public or protected members (except to override methods
    // of java.lang.Object), and do not change the signatures (names,
    // arguments, and return types) of any public member.
    // ADD ANY FIELDS AND NON-PUBLIC MEMBERS YOU NEED HERE.
    /** Class for tree nodes. */
    private abstract class TreeNode<A> {
        /** PointView for TreeNode. */
        protected final PointView<A> _view;
        /** Transition Size. */
        protected final int _transitionSize;
        
        /** Constructor for any TreeNode. Sets _view to VIEW and
         * _transitionSize to TRANSITIONSIZE
         */
        private TreeNode(PointView<A> view, int transitionSize) {
            _view = view;
            _transitionSize = transitionSize;
        }
        /** Add POINT to me. */
        public abstract void add(A point);
        /** Returns true if I am a leaf. */
        public abstract boolean isLeaf();
        /** Returns size of tree starting at me. */
        public abstract int size();
        /** Returns Iterator through me. */
        public abstract Iterator<A> iterator();
        /** Returns true if I contain POINT. */
        public abstract boolean contains(A point);
        /** Removes POINT from me if it exists. */
        public abstract void remove(A point);
    }
    /** Class that represents Internal Node of Tree */
    private class InternalNode<A> extends TreeNode<A> {
        /** Upper Left node. */
        private TreeNode<A> nwnode;
        /** Upper Right node. */
        private TreeNode<A> Ulnode;
        /** Lower Left node. */
        private TreeNode<A> Llnode;
        /** Lower Right node. */
        private TreeNode<A> Lrnode;
        /** Root */
        private A root;

        /** Sets viewer to VIEW and transition size to TRANSITIONSIZE */
        private InternalNode(PointView<A> view, int transitionSize) {
            super(view, transitionSize);
            nwnode = new LeafNode<A>(view, transitionSize);
            Ulnode = new LeafNode<A>(view, transitionSize);
            Llnode = new LeafNode<A>(view, transitionSize);
            Lrnode = new LeafNode<A>(view, transitionSize);
        }

        /** Returns size of root */
        public int size() {
            if (root == null) {
                return 0;
            } else {
                return 1 + nwnode.size() + 
                        Ulnode.size() + Llnode.size() + Lrnode.size();
            }
        }
        
        public void remove(A point) {
            if (_view.equals(point, root)) {
                Iterator<A> iter = this.iterator();
                iter.next();
                root = iter.next();
                nwnode = new LeafNode<A>(_view, _transitionSize);
                Ulnode = new LeafNode<A>(_view, _transitionSize);
                Llnode = new LeafNode<A>(_view, _transitionSize);
                Lrnode = new LeafNode<A>(_view, _transitionSize);
                while (iter.hasNext()) {
                    add(iter.next());
                }
            } else {
                double xpoint = _view.getX(point);
                double ypoint = _view.getY(point);
                double xRoot = _view.getX(root);
                double yRoot = _view.getY(root);
                int quadrant = quadrant(xpoint, ypoint, xRoot, yRoot);
                switch(quadrant) {
                case 2:
                    Ulnode.remove(point);
                case 1: 
                    nwnode.remove(point);
                case 3:
                    Llnode.remove(point);
                case 4: 
                    Lrnode.remove(point);
                }
            }
        }
        
        public boolean contains(A point) {
            if (_view.equals(point, root)) {
                return true;
            } else {
                double xpoint = _view.getX(point);
                double ypoint = _view.getY(point);
                double xRoot = _view.getX(root);
                double yRoot = _view.getY(root);
                int quadrant = quadrant(xpoint, ypoint, xRoot, yRoot);
                switch(quadrant) {
                case 2:
                    return Ulnode.contains(point);
                case 1: 
                    return nwnode.contains(point);
                case 3:
                    return Llnode.contains(point);
                case 4: 
                    return Lrnode.contains(point);
                }
                return false;
            }
        }
        
        public Iterator<A> iterator() {
            return new InternalNodeIterator();
        }
        
        private class InternalNodeIterator implements Iterator<A> {
            A next;
            A result;
            Iterator<A> UrIter;
            Iterator<A> UlIter;
            Iterator<A> LlIter;
            Iterator<A> LrIter;
            public InternalNodeIterator() {
                next = root;
                UrIter = nwnode.iterator();
                UlIter = Ulnode.iterator();
                LlIter = Llnode.iterator();
                LrIter = Lrnode.iterator();
            }
            
            public boolean hasNext() {
                return (next != null);
            }
            
            public A next() {
                result = next;
                if (UrIter.hasNext()) {
                    next = UrIter.next();
                } else if (UlIter.hasNext()) {
                    next = UlIter.next();
                } else if (LlIter.hasNext()) {
                    next = LlIter.next();
                } else if (LrIter.hasNext()) {
                    next = LrIter.next();
                } else {
                    next = null;
                }
                return result;
            }
            public void remove() {
                // Must fix
                System.exit(1);
            }
        }

        /** Returns true if LeafNode */ 
        public boolean isLeaf() {
            return false;
        }
        /** Adds POINT to selected branch based on location. */
        public void add(A point) {
            if (root == null) {
                root = point;
            } else {
                double xpoint = _view.getX(point);
                double ypoint = _view.getY(point);
                double xRoot = _view.getX(root);
                double yRoot = _view.getY(root);
                int quadrant = quadrant(xpoint, ypoint, xRoot, yRoot);
                switch(quadrant) {
                case 2:
                    Ulnode = addToNode(Ulnode, point);
                    break;
                case 1: 
                    nwnode = addToNode(nwnode, point);
                    break;
                case 3:
                    Llnode = addToNode(Llnode, point);
                    break;
                case 4: 
                    Lrnode = addToNode(Lrnode, point);
                    break;
                }
            }
        }
        /** Adds POINT TO NODE and returns the new node */
        private TreeNode<A> addToNode(TreeNode<A> node, A point) {
            if (node.isLeaf()) {
                if (((LeafNode<A>) node).isFull()) {
                    InternalNode<A> temp = 
                            new InternalNode<A>(_view, _transitionSize);
                    for (int i = 0;
                            i < node.size();
                            i += 1) {
                        temp.add(((LeafNode<A>) node).child(i));
                    }
                    temp.add(point);
                    node = temp;

                } else {
                    node.add(point);
                }
            } else {
                node.add(point);
            }
            return node;
        }
    }
    private class LeafNode<A> extends TreeNode<A> {
        /** ArrayList holding Points */
        ArrayList<A> items = new ArrayList<A>();
        private LeafNode(PointView<A> view, int transitionSize) {
            super(view, transitionSize);
        }
        /** Add Point P to LeafNode */
        public void add(A p) {
            items.add(p);
        }
        
        public boolean contains(A point) {
            return items.contains(point);
        }

        //* Returns number of items in Leaf */
        public int size() {
            return items.size();
        }

        /** Returns item number K of items 
         * @return */
        private A child(int k) {
            return items.get(k);
        }

        /** Returns true if LeadNode */
        public boolean isLeaf() {
            return true;
        }

        /** Returns true if leaf contains max number of items */
        private boolean isFull() {
            return items.size() == _transitionSize;
        }
        
        public Iterator<A> iterator() {
            return items.iterator();
        }
        
        public void remove(A point) {
            items.remove(point);
        }
    }
    // CONSTRUCTORS, METHODS, OTHER FIELDS HERE
}

