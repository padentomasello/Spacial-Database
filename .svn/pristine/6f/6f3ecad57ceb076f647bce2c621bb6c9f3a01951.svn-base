// Remove all comments that begin with //, and replace appropriately.
// Feel free to modify ANYTHING in this file.

package tracker;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;
import java.util.regex.MatchResult;

/** Main class of the tracker program.
 * @author
 */
public class Main {

    /** The main tracker program.  ARGS are as described in the
     *  project 2 handout:
     *      [--debug=N] [ INPUTFILE [ OUTPUTFILE ] ]
     */
    public static void main(String... args) {
        String inputFileName, outputFileName;
        inputFileName = outputFileName = null;
        String input = "";
        int debug = 0;
        for (String x: args) {
            input += x;
        }
        Scanner commandScanner = new Scanner(input);
        commandScanner.findInLine("(\\[--debug=(\\d+)\\])?(\\[(\\S+)"
                + "(\\[(\\S+)\\])?\\])?");
        MatchResult parts = commandScanner.match();
        if (parts.group(1) != null) {
            debug = Integer.parseInt(parts.group(2));
        }
        if (parts.group(4) != null) {
            inputFileName = parts.group(4);
        }
        if (parts.group(6) != null) {
            outputFileName = parts.group(6);
        }
        // REPLACE WITH ARGUMENT PROCESSING.  SET DEBUGGING PARAMETERS
        // AND (POSSIBLY) inputFileName AND outputFileName.
        if (inputFileName != null) {
            try {
                System.setIn(new FileInputStream(inputFileName));
            } catch (FileNotFoundException e) {
                System.err.printf("Error: could not open %s%n", inputFileName);
                System.exit(1);
            }
        }
        if (outputFileName != null) {
            try {
                System.setOut(new PrintStream(outputFileName));
            } catch (FileNotFoundException e) {
                System.err.printf("Error: could not open %s%n",
                                   outputFileName);
                System.exit(1);
            }
        }
        
        
        // ADD PROCESSING CODE HERE.
        parseInput();
        System.out.close();
    }
    /** Parses input and instantiate posts. */
    private static void parseInput() {
        Scanner inputScanner = new Scanner(System.in);
        inputScanner.skip("(?:\\#(?:.*))");
        inputScanner.findWithinHorizon("(\\d+)\\s+(\\d+)\\s"
                + "+(\\d+)\\s(\\d+)\\s+(\\d+)\\s*", 0);
        MatchResult config = inputScanner.match();
        float tMax = Float.parseFloat(config.group(1));
        int S = Integer.parseInt(config.group(2));
        float D = Float.parseFloat(config.group(3));
        float y = Float.parseFloat(config.group(4));
        float vX = Float.parseFloat(config.group(5));
        configure(tMax, S, D, y, vX);
        while (inputScanner.hasNext()) {
            inputScanner.skip("(?:\\#(?:\\s+\\w*)*^)?");
            inputScanner.findWithinHorizon("\\s*(\\d+)\\s*(\\d+)\\s*(\\d+)\\s*", 0);
            MatchResult postConfig = inputScanner.match();
            int xp = Integer.parseInt(postConfig.group(1));
            int yp = Integer.parseInt(postConfig.group(2));
            int t = Integer.parseInt(postConfig.group(3));
            addPost(new Post(xp, yp, t));
        }
    }
    /** Sets duration to TMAX, random seed to S, maximum distance to which
     * a post can be seen to D, starting heighth of vehicle to Y, and the
     * starting velocity to VX. 
     */
    private static void configure(float tMax, int S, float D, float y, float vX) {
        printParameters(tMax, S, D, y, vX);
    }
    /** Prints parameters in correct format. 
     * @param tMax duration.
     * @param S random seed. 
     * @param D maximun detection distance. 
     * @param y starting y location. 
     * @param vX
     */
    private static void printParameters(float tMax, int S, float D, float y,
            float vX) {
        System.out.println("Simulation Parameters:");
        System.out.println(String.format("    "
                + "Total Simulation Time: %.1f", tMax));
        System.out.println(String.format("    "
                +"Random Seed: %d", S));
        System.out.println(String.format("    "
                +"Maximun detection radius: %.1f", D));
        System.out.println(String.format("    "+
                "Initial vertical location: %.1f", y));
        System.out.println(String.format("    "+
                "Initial horizonal velocity of vehicle: %.1f", vX));
    }
    /** Adds post to a quadtree */ 
    private static void addPost(Post post) {
        
    }
    /** Print brief description of the command-line format. */
    static void usage() {
        // FIXME: REPLACE WITH SOMETHING TO PRINT BRIEF MESSAGE ABOUT HOW TO
        // USE THIS PROGRAM.
        System.exit(1);
    }

    // FIXME: OTHER METHODS AND FIELDS HERE, IF NEEDED
}
