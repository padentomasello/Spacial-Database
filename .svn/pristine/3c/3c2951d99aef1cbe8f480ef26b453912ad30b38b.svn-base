package tracker;
import java.awt.geom.Point2D;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.TreeSet;
import java.util.regex.MatchResult;
import util.QuadTree;

/** Main class of the tracker program.
 * @author Daniel Paden Tomasello cs61b-bz
 */
public class Main {

    /** The main tracker program.  ARGS are as described in the
     *  project 2 handout:
     *      [--debug=N] [ INPUTFILE [ OUTPUTFILE ] ]
     */
    public static void main(String... args) {
        String inputFileName, outputFileName;
        inputFileName = outputFileName = null;
        String input = "";
        int debug = 0;
        for (String x: args) {
            input += x;
        }
        Scanner commandScanner = new Scanner(input);
        commandScanner.findInLine("(\\[--debug=(\\d+)\\])?(\\[(\\S+)"
                + "(\\[(\\S+)\\])?\\])?");
        MatchResult parts = commandScanner.match();
        if (parts.group(1) != null) {
            debug = Integer.parseInt(parts.group(2));
        }
        if (parts.group(4) != null) {
            inputFileName = parts.group(4);
        }
        if (parts.group(6) != null) {
            outputFileName = parts.group(6);
        }

        if (inputFileName != null) {
            try {
                System.setIn(new FileInputStream(inputFileName));
            } catch (FileNotFoundException e) {
                System.err.printf("Error: could not open %s%n", inputFileName);
                System.exit(1);
            }
        }
        if (outputFileName != null) {
            try {
                System.setOut(new PrintStream(outputFileName));
            } catch (FileNotFoundException e) {
                System.err.printf("Error: could not open %s%n",
                        outputFileName);
                System.exit(1);
            }
        }
        parseInput();
        System.out.close();
    }
    /** Parses input and instantiate posts. */
    private static void parseInput() {
        LinkedList<Float> numbers = new LinkedList<Float>();
        Scanner inputScanner = new Scanner(System.in);
        float tMax = 0;
        float S = 0;
        float D = 0;
        float y = 0;
        float vX = 0;
        while (inputScanner.hasNext()) {
            inputScanner.skip("(?:\\#.*)?");
            inputScanner.findWithinHorizon("\\s*([\\d]*\\.?[\\d]+)\\s*", 10);
            float temp = Float.parseFloat(inputScanner.match().group(1));
            numbers.add(temp);
            if (numbers.size() == 5) {
                tMax = numbers.poll();
                S = numbers.poll();
                D = numbers.poll();
                y = numbers.poll();
                vX = numbers.poll();
                break;
            }
        }
        configure(tMax, S, D, y, vX);
        times = new HashSet<Float>();
        while (inputScanner.hasNext()) {
            inputScanner.skip("(?:\\#.*)?");
            inputScanner.findWithinHorizon("\\s*([\\d]*\\.?[\\d]+)\\s*", 0);
            float temp = Float.parseFloat(inputScanner.match().group(1));
            numbers.add(temp);
            int postnum = 1;
            
            if (numbers.size() == 3) {
                float xp = numbers.poll();
                float yp = numbers.poll();
                float t = numbers.poll();
                times.add(t);
                /** if ((!times.contains(t)) & (t != 0)) {
                    for (int i = 2; time < _tMax; i += 1) {
                        times.add(time);
                        temp = t * i;
                    }
                } */
                addPost(xp, yp, t, postnum);
                postnum += 1;
            }
        }
        if (numbers.size() != 0) {
            System.exit(1);
        }
        times.add(_tMax);
        simulate();
    }
    /** Simulation. */
    private static void simulate() {
        Vehicle car = new Vehicle(_y, _vX);
        Chooser chooser = new Chooser(_S);
        float time = 0;
        PostComparator comp = new PostComparator();
        PriorityQueue<Post> reportingPosts = new PriorityQueue<Post>(1, comp);
        Iterator<Float> timeIter= times.iterator();
        while (time < _tMax) {
            time = timeIter.next();
            car.advance(time);
            float x = car.x();
            float y = car.y();
            Iterator<Post> iter = posts.iterator(x - _D, y - _D,
                    x + _D + DELTA, y + _D + DELTA);
            while (iter.hasNext()) {
                Post post = iter.next();
                if (Point2D.distance(x, y, view.getX(post),
                        view.getY(post)) <= _D) {
                    if (post.isPulsing(time)) {
                        post.detect(x, y, time);
                        car.detected(chooser);
                        if (!reportingPosts.contains(post)) {
                            reportingPosts.add(post);
                        }
                    }
                }
            }
        }
        for (Post post: reportingPosts) {
            post.report();
        }
        System.out.println("");
        car.reportFinal(time);
    }
    /** Comparator for Posts. */
    public static class PostComparator implements Comparator<Post> {
        @Override
        public int compare(Post post1, Post post2) {
            if (post1.getPostNum() == post2.getPostNum()) {
                return 0;
            } else if (post1.getPostNum() > post2.getPostNum()) {
                return 1;
            } else {
                return -1;
            }

        }
        /** Returns true if POST1 and POST2 are the same. */
        public boolean equals(Post post1, Post post2) {
            if (post1.getPostNum() == post2.getPostNum()) {
                return true;
            }
            return false;
        }
    }

    /** Sets duration to TMAX, random seed to S, initial y location
     * to Y and the initial horizontal velocity to VX and
     * Maximun distance of pulse to D. */
    private static void configure(float tMax, float S,
            float D, float y, float vX) {
        printParameters(tMax, S, D, y, vX);
        _tMax = tMax;
        _D = D;
        _S = S;
        _y = y;
        _vX = vX;
    }


    /** Simulation Duration. */
    private static float _tMax;

    /**Seed for random generator. */
    private static float _S;

    /** Maximun detection radius. */
    private static float _D;

    /** Initial Vertical Location. */
    private static float _y;

    /** INitial horizontal velocity of vehicle. */
    private static float _vX;




    /** Prints parameters in correct format.
     * @param tMax duration.
     * @param S random seed.
     * @param D maximun detection distance.
     * @param y starting y location.
     * @param vX initial x horizontal velocity.
     */
    private static void printParameters(float tMax, float S, float D, float y,
            float vX) {
        System.out.println("Simulation Parameters:");
        System.out.println(String.format("    "
                + "Total Simulation Time: %.1f", tMax));
        System.out.println(String.format("    "
                + "Random Seed: %.0f", S));
        System.out.println(String.format("    "
                + "Maximun detection radius: %.1f", D));
        System.out.println(String.format("    "
                + "Initial vertical location: %.1f", y));
        System.out.println(String.format("    "
                + "Initial horizonal velocity of vehicle: %.1f", vX));
        System.out.println("");
        System.out.println("Reports:");
    }
    /** Adds post to a quadtree.
     * @param xp x position
     * @param yp y position
     * @param t t interval of pulses
     * @param postnum Post number.
     */
    private static void addPost(float xp, float yp, float t, int postnum) {
        posts.add(new Post(xp, yp, t, postnum));
    }

    /** Represent small interval so that within bounds will
     * check bound points. */
    private static final double DELTA = 0.0000000001;

    /** PriorityQueue for holding times of post pulses. */
    private static HashSet<Float> times;

    /** PostViewer. */
    private static PostView view = new PostView();

    /** QuadTree to hold Posts. */
    private static QuadTree<Post> posts = new QuadTree<Post>(view, 1);
    /** Print brief description of the command-line format. */
    static void usage() {
        System.exit(1);
    }
}
