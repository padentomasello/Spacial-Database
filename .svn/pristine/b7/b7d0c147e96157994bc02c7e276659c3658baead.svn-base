// Remove all comments that begin with //, and replace appropriately.
// Feel free to modify ANYTHING in this file.

package tracker;

import java.awt.geom.Point2D;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.regex.MatchResult;

import util.QuadTree;

/** Main class of the tracker program.
 * @author
 */
public class Main {

    /** The main tracker program.  ARGS are as described in the
     *  project 2 handout:
     *      [--debug=N] [ INPUTFILE [ OUTPUTFILE ] ]
     */
    public static void main(String... args) {
        String inputFileName, outputFileName;
        inputFileName = outputFileName = null;
        String input = "";
        int debug = 0;
        for (String x: args) {
            input += x;
        }
        Scanner commandScanner = new Scanner(input);
        commandScanner.findInLine("(\\[--debug=(\\d+)\\])?(\\[(\\S+)"
                + "(\\[(\\S+)\\])?\\])?");
        MatchResult parts = commandScanner.match();
        if (parts.group(1) != null) {
            debug = Integer.parseInt(parts.group(2));
        }
        if (parts.group(4) != null) {
            inputFileName = parts.group(4);
        }
        if (parts.group(6) != null) {
            outputFileName = parts.group(6);
        }
        // REPLACE WITH ARGUMENT PROCESSING.  SET DEBUGGING PARAMETERS
        // AND (POSSIBLY) inputFileName AND outputFileName.
        if (inputFileName != null) {
            try {
                System.setIn(new FileInputStream(inputFileName));
            } catch (FileNotFoundException e) {
                System.err.printf("Error: could not open %s%n", inputFileName);
                System.exit(1);
            }
        }
        if (outputFileName != null) {
            try {
                System.setOut(new PrintStream(outputFileName));
            } catch (FileNotFoundException e) {
                System.err.printf("Error: could not open %s%n",
                        outputFileName);
                System.exit(1);
            }
        }


        // ADD PROCESSING CODE HERE.
        parseInput();
        System.out.close();
    }
    /** Parses input and instantiate posts. */
    private static void parseInput() {
        Scanner inputScanner = new Scanner(System.in);
        inputScanner.skip("(?:\\#(?:.*))");
        inputScanner.findWithinHorizon("(\\d+)\\s+(\\d+)\\s"
                + "+(\\d+)\\s(\\d+)\\s+(\\d+)\\s*", 0);
        MatchResult config = inputScanner.match();
        float tMax = Float.parseFloat(config.group(1));
        float S = Integer.parseInt(config.group(2));
        float D = Float.parseFloat(config.group(3));
        float y = Float.parseFloat(config.group(4));
        float vX = Float.parseFloat(config.group(5));
        configure(tMax, S, D, y, vX);
        times = new PriorityQueue<Float>();
        int postnum = 1;
        while (inputScanner.hasNext()) {
            inputScanner.skip("(?:\\#(?:\\s+\\w*)*^)?");
            inputScanner.findWithinHorizon("\\s*([\\d]*\\.?[\\d]+)\\"
                    + "s*([\\d]*\\.?[\\d]+)\\s*([\\d]*\\.?[\\d]+)\\s*", 0);
            MatchResult postConfig = inputScanner.match();
            float xp = Float.parseFloat(postConfig.group(1));
            float yp = Float.parseFloat(postConfig.group(2));
            float t = Float.parseFloat(postConfig.group(3));
            float temp = t;
            if (!times.contains(t) & t != 0) {
                for (int i = 2; temp < _tMax; i += 1) {
                    times.add(temp);
                    temp = t * i;
                }
            }
            times.add(_tMax);
            addPost(xp, yp, t, postnum);
            postnum += 1;
        }
        simulate();
    }
    /** Simulation */
    private static void simulate() {
        Vehicle car = new Vehicle(_y, _vX, _S);
        float time = 0;
        PostComparator comp = new PostComparator();
        PriorityQueue<Post> reportingPosts = new PriorityQueue<Post>(1, comp);
        while (time < _tMax) {
            time = times.poll();
            car.advance(time);
            float x = car.x();
            float y = car.y();
            Iterator<Post> iter = posts.iterator(x - _D, y - _D, x + _D, y + _D);
            while (iter.hasNext()) {
                Post post = iter.next();
                if (Point2D.distance(x, y, view.getX(post), view.getY(post)) < _D) {
                    if (post.isPulsing(time)) {
                        post.detect(x, y, time);
                        car.detected();
                        if (!reportingPosts.contains(post)) {
                            reportingPosts.add(post);
                        }
                    }
                }
            }
        }
        for (Post post: reportingPosts) {
            post.report();
        }
    }
    /** Comparator for Posts */
    public static class PostComparator implements Comparator<Post>{

        public int compare(Post post1, Post post2) {
            if (post1.get_postnum() == post2.get_postnum()) {
                return 0;
            } else if (post1.get_postnum() > post2.get_postnum()) {
                return 1;
            } else {
                return -1;
            }

        }

        public boolean equals(Post post1, Post post2) {
            if (post1.get_postnum() == post2.get_postnum()) {
                return true;
            }
            return false;
        }
    }
    /** Sets duration to TMAX, random seed to S, and created vehicle. */
    private static void configure(float tMax, float S, float D, float y, float vX) {
        printParameters(tMax, S, D, y, vX);
        _tMax = tMax;
        _D = D;
        _S = S;
        _y = y;
        _vX = vX;
    }


    /** Simulation Duration */
    private static float _tMax;

    /**Seed for random generator */
    private static float _S;

    /** Maximun detection radius */
    private static float _D;

    /** Initial Vertical Location */
    private static float _y;

    /** INitial horizontal velocity of vehicle */
    private static float _vX;




    /** Prints parameters in correct format. 
     * @param tMax duration.
     * @param S random seed. 
     * @param D maximun detection distance. 
     * @param y starting y location. 
     * @param vX
     */
    private static void printParameters(float tMax, float S, float D, float y,
            float vX) {
        System.out.println("Simulation Parameters:");
        System.out.println(String.format("    "
                + "Total Simulation Time: %.1f", tMax));
        System.out.println(String.format("    "
                +"Random Seed: %.0f", S));
        System.out.println(String.format("    "
                +"Maximun detection radius: %.1f", D));
        System.out.println(String.format("    "+
                "Initial vertical location: %.1f", y));
        System.out.println(String.format("    "+
                "Initial horizonal velocity of vehicle: %.1f", vX));
        System.out.println("");
        System.out.println("Reports:");
    }
    /** Adds post to a quadtree */ 
    private static void addPost(float xp, float yp, float t, int postnum) {
        posts.add(new Post(xp, yp, t, postnum));
    }    


    /** PriorityQueue for holding times of post pulses */
    private static PriorityQueue<Float> times;

    /** PostViewer */
    private static PostView view = new PostView();

    /** QuadTree to hold Posts */
    private static QuadTree<Post> posts = new QuadTree<Post>(view, 1);
    /** Print brief description of the command-line format. */
    static void usage() {
        // FIXME: REPLACE WITH SOMETHING TO PRINT BRIEF MESSAGE ABOUT HOW TO
        // USE THIS PROGRAM.
        System.exit(1);
    }

    // FIXME: OTHER METHODS AND FIELDS HERE, IF NEEDED
}
